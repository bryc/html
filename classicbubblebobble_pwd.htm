<!--
Classic Bubble Bobble (GBC) Password Generator
**********************************************
Credit: (c) bryc 2015-2020 (github.com/bryc)

Jan 28 2020 - new theme
  cleaned and optimized the code overall
Mar 24 2016 - new version of bubble bobble pw generator
  more efficient encoder/decoder for charset
  new rotate method based on strings (faster, better than array)
  more accurate checksum algorithm, modulo 23.

NOTES:
* The game rejects passwords leading to undefined stages. Highest possible stage is 60 on world 0.
* Due to an overflow issue, some stages can have two passwords for the same level. (Hi=1,Lo=0) = (Hi=0,Lo=16)
  Some passwords found online break the overflow rule, so this could be by design. This appears to limit
  the maximum number of addressable stages. (23<<4)+23 (392) vs 24^2 (576).

TODO:
* Generate list of passwords which lead to the same stage
-->
<style>
#box {
    font:18px Trebuchet MS,sans-serif;text-align:center;
    margin:auto;max-width:896px;
}
.red {text-decoration:underline;color:#E00}
div#wrap {column-count:3;column-gap:4px}
#box h3 {display:inline-block;white-space:nowrap;font-size:1.2em}
#box h1,#box h3, p {margin:6px}
#box input,#info {
    padding:11px;
    background:#FFF linear-gradient(#dde2,#2252);
    border:3px solid #DDD;border-radius:6px;
}
#box input{outline:none;text-align:center;width:100%;font-size:1.7em}
#box input:focus {background-color:#F3F3F3}
#pword {font-family:Consolas,monospace}
</style>

<div id=box>
<h1>Classic Bubble Bobble (GBC)</h1>
<p>A password encoder/decoder for the game Classic Bubble Bobble for GBC. Code by <a href=http://github.com/bryc>@bryc</a>.</p>
<h3>Password</h3>
<div id=pwdbox><input id=pword maxlength=4 spellcheck=false></div>

<div id=wrap>
<h3>Stage (Low)</h3>
<input id=stageLO value=0 min=0 max=23 type=number>
<h3>World</h3>
<input id=world value=0 min=0 max=23 type=number>
<h3>Stage (High)</h3>
<input id=stageHI value=0 min=0 max=23 type=number>
</div>

<h3>Info</h3>
<div id=info></div>
</div>

<script>
/* ****************************************
Main password decoding/encoding functions */

// Exploit string index for easy base swapping
function baseconv(n) {
    var chr = "BCDFGHJKLMNPQRSTVWXZ1345";
    return typeof n === "string" ? chr.indexOf(n) : chr[n];
}

// Rotate string, modulo 3
// Possible bug: rotate("ABCD", 3) = "ABC"
function rotate(str, n) {
    n %= 3, n = n > 0 ? 3-n : -n;
    return str.substr(n, 3) + str.substr(0, n);
}

function decodePass(pword) {
    // Validate input: 4 chars of specific charset. Overkill but still useful.
    if (!/^[BCDFGHJKLMNPQRSTVWXZ1345]{4}$/.test(pword)) {return false}

    // First read the check digit and isolate shift digit
    var checkDigit = baseconv(pword[0]), shift = checkDigit & 3;

    // Unshift the remaining password using the shift digit
    var unshift = rotate(pword.substr(1), -shift);
    var StageLO = baseconv(unshift[0]);
    var World   = baseconv(unshift[1]);
    var StageHI = baseconv(unshift[2]);

    // Check if new check digit matches the stored one
    var newCheck = (StageLO + World + StageHI) % 23;
    if(checkDigit !== newCheck) {
        dest.nfo.innerHTML = `<b>Invalid password: Bad checksum</b><br>Fixed checksum: ${baseconv(newCheck)+pword.substr(1)}`;
        return false;
    }

    return {
        Password: pword,
        decoded: {StageLO: StageLO, World: World, StageHI: StageHI, checkDigit: checkDigit},
        World: World,
        Stage: (StageHI << 4) + StageLO
    };
}

function encodePass(StgLO, Wrld, StgHI) {
    // Terminate if input is invalid (must be 0-23)
    function chk(a) {return a > 23 || a < 0}
    if(chk(StgLO) || chk(Wrld) || chk(StgHI)) {return false}

    var Stage = (StgHI << 4) + StgLO;
    var checkDigit = (StgLO + Wrld + StgHI) % 23;
    var shift = checkDigit & 3;
    var unshifted = baseconv(StgLO) + baseconv(Wrld) + baseconv(StgHI);

    return {
        Password: baseconv(checkDigit) + rotate(unshifted, shift),
        decoded: {StageLO: StgLO, World: Wrld, StageHI: StgHI, checkDigit: checkDigit, shiftValue: shift},
        World: Wrld,
        Stage: Stage
    };  
}

/* ****************************************
User Interface functionality */

var dest = function(i){return document.getElementById(i)};

function doEncode() {
    var PASS = encodePass(+dest.slo.value, +dest.wld.value, +dest.shi.value);
    if(!PASS) {
        dest.nfo.innerHTML = "<b>Encode error<br>Invalid value range</b>";
        return false;
    }

    dest.pwd.value = PASS.Password;
    var Wrl = PASS.World + 1, Stg = PASS.Stage + 1;
    // Print information to screen.
    dest.nfo.innerHTML = "Stage: <b>" + Stg + "</b> World: <b>" + Wrl + "</b><br>"
    + "Checksum: " + PASS.decoded.checkDigit + ", Shift: " + (PASS.decoded.checkDigit & 3);

    // Rudimentary password validation, doesn't necessarily match game's behavior
    var invalid = false;
    if(Wrl===1 && (Stg<1 || Stg>60)) {invalid = true}
    if(Wrl===2 && (Stg<2 || Stg>51)) {invalid = true}
    if(Wrl===3 && (Stg<26 || Stg>34) && (Stg<43 || Stg>51)) {invalid = true}
    if(Wrl>3 || Wrl<1) {invalid = true}

    if(invalid) {
        dest.pwd.className = "red";
        dest.nfo.innerHTML += "<br><b>Stage doesn't exist</b>";
    } else {
        dest.pwd.className = "";
    }
}

function doDecode() {
    this.value = this.value.toUpperCase();
    this.value = this.value.replace(/[AEIOUY267890]/gi,"");
    if (/^[BCDFGHJKLMNPQRSTVWXZ1345]{4}$/.test(this.value)===false) {
        dest.nfo.innerHTML = "<b style=display:block;margin:11px>Enter a valid password (4 chars)</b>";
        dest.pwd.className = "";
    } else {
        var PASS = decodePass(this.value);
        if(!PASS) {dest.pwd.className = "red"; return false}
        dest.wld.value = PASS.decoded.World;
        dest.slo.value = PASS.decoded.StageLO;
        dest.shi.value = PASS.decoded.StageHI;
        doEncode();
    }
}

window.onload = function() {
    dest = {
        pwd: dest("pword"),
        slo: dest("stageLO"),
        shi: dest("stageHI"),
        wld: dest("world"),
        nfo: dest("info")
    };

    dest.pwd.oninput = doDecode;
    dest.slo.oninput = doEncode;
    dest.shi.oninput = doEncode;
    dest.wld.oninput = doEncode;
    doEncode();
};
</script>